apply plugin: 'maven-publish'

publishing {
  def properties = new Properties()
  properties.load(rootProject.file('local.properties').newDataInputStream())

  repositories {
    maven {
      name = "GitHubPackages"
      url = uri("https://maven.pkg.github.com/abema/bucketeer")
      credentials {
        username = properties.getProperty("gpr.user") ?: System.getenv("GITHUB_USER_FOR_RELEASE")
        password = properties.getProperty("gpr.key") ?: System.getenv("GITHUB_API_TOKEN_FOR_RELEASE")
      }
    }
  }
  publications {
    gpr(MavenPublication) {
      groupId = 'jp.bucketeer'
      artifactId = 'sdk-android'

      version = properties.getProperty("sdk.version") ?: System.getenv("SDK_VERSION")
      artifact source: file("${project.buildDir}/outputs/aar/${project.name}-release.aar")

      pom.withXml {
        final dependenciesNode = asNode().appendNode('dependencies')

        ext.addDependency = { Dependency dep, String scope ->
          if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
            return // ignore invalid dependencies

          final dependencyNode = dependenciesNode.appendNode('dependency')
          dependencyNode.appendNode('groupId', dep.group)
          dependencyNode.appendNode('artifactId', dep.name)
          dependencyNode.appendNode('version', dep.version)
          dependencyNode.appendNode('scope', scope)

          if (!dep.transitive) {
            // If this dependency is transitive, we should force exclude all its dependencies them from the POM
            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
            exclusionNode.appendNode('groupId', '*')
            exclusionNode.appendNode('artifactId', '*')
          } else if (!dep.properties.excludeRules.empty) {
            // Otherwise add specified exclude rules
            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
            dep.properties.excludeRules.each { ExcludeRule rule ->
              exclusionNode.appendNode('groupId', rule.group ?: '*')
              exclusionNode.appendNode('artifactId', rule.module ?: '*')
            }
          }
        }

        // List all "compile" dependencies (for old Gradle)
        configurations.compile.getAllDependencies().each { dep -> addDependency(dep, "compile") }
        // List all "api" dependencies (for new Gradle) as "compile" dependencies
        configurations.api.getAllDependencies().each { dep -> addDependency(dep, "compile") }
        // List all "implementation" dependencies (for new Gradle) as "runtime" dependencies
        configurations.implementation.getAllDependencies().each { dep -> addDependency(dep, "runtime") }
      }
    }
  }
}
