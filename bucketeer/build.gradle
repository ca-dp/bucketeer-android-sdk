plugins {
  alias(libs.plugins.android.library)
  alias(libs.plugins.kotlin.android)
  alias(libs.plugins.kotlin.kapt)
  alias(libs.plugins.protobuf)
}

def properties = new Properties()
properties.load(rootProject.file('local.properties').newDataInputStream())

android {
  namespace = "jp.bucketeer.sdk"

  compileSdkVersion project.findProperty("android.compileSdkVersion") as int
  defaultConfig {
    def isTest = !gradle.startParameter.taskNames.findAll { it.contains("Test") }.isEmpty()
    if (isTest) {
      minSdkVersion project.findProperty("android.testMinSdkVersion") as int
    } else {
      minSdkVersion project.findProperty("android.minSdkVersion") as int
    }
    targetSdkVersion project.findProperty("android.targetSdkVersion") as int

    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    testInstrumentationRunnerArguments clearPackageData: 'true'
  }

  buildTypes {
    debug {
      def API_KEY = properties.getProperty("api_key") ?: System.getenv("API_KEY")
      def API_URL = properties.getProperty("api_url") ?: System.getenv("API_URL")
      buildConfigField("String", "API_KEY", "\"${API_KEY}\"")
      buildConfigField("String", "API_URL", "\"${API_URL}\"")
    }
    release {
      minifyEnabled true
      consumerProguardFiles 'proguard-rules.pro'
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  sourceSets {
    String sharedTestDir = 'src/sharedTest/java'
    test {
      java.srcDir sharedTestDir
    }
    androidTest {
      java.srcDir sharedTestDir
    }
  }
  compileOptions {
    sourceCompatibility 1.8
    targetCompatibility 1.8
  }
  packagingOptions {
    exclude 'google/protobuf/descriptor.proto'
  }
  lintOptions {
    disable 'InvalidPackage'
    xmlReport true
  }
}

dependencies {
  // gRPC
  implementation libs.grpc.okhttp
  implementation libs.okhttp
  implementation libs.grpc.protobufLite
  implementation libs.grpc.stub
  compileOnly libs.javaxAnnotation
  // This provides the protobuf.Duration for event.proto
  compileOnly libs.proto.googleCommon
  implementation libs.proto.javalite

  // Google Play Services
  compileOnly libs.googlePlayServices.basement

  // Test
  testImplementation libs.junit
  testImplementation libs.robolectric
  testImplementation libs.mockito.core
  testImplementation libs.mockito.kotlin
  testImplementation libs.kluent
  testImplementation libs.androidx.test.core
  androidTestImplementation libs.androidx.test.espresso.core
  androidTestImplementation(libs.androidx.test.espresso.contrib) {
    exclude group: 'com.google.protobuf', module: 'protobuf-lite'
  }
  // Explicitly depending on accessibility-test-framework to solve duplicate class error
  // https://github.com/android/android-test/issues/861
  androidTestImplementation libs.android.test.accessibility
  androidTestImplementation libs.androidx.test.rules
  androidTestImplementation libs.androidx.test.ext
  androidTestImplementation libs.mockito.android
  androidTestImplementation(libs.mockito.kotlin) {
    exclude group: 'org.mockito', module: 'mockito-core'
  }
  androidTestImplementation(libs.kluent) {
    exclude group: 'org.mockito', module: 'mockito-core'
  }
  androidTestUtil libs.androidx.test.orchestrator
}

protobuf {
  protoc {
    artifact = "com.google.protobuf:protoc:$versions.PROTOC"
  }
  plugins {
    javalite {
      artifact = "com.google.protobuf:protoc-gen-javalite:$versions.PROTOC_JAVALITE"
    }
    grpc {
      artifact = "io.grpc:protoc-gen-grpc-java:$versions.GRPC"
    }
  }
  generateProtoTasks {
    all().each { task ->
      task.builtins {
        java {
          option 'lite'
        }
      }
      task.plugins {
        grpc {
          option 'lite'
        }
      }
    }
  }
}

apply from: "publish.gradle"
